/**
 * 对于全局变量来说，全局变量的生命周期是永久的，除非我们主动销毁这个全局变量。
 * 而对于在函数内用 var 关键字声明的局部变量来说，当退出函数时，这些局部变量即失去了它们的价值，
 * 它们会随着函数的调用的结束而被毁掉。
 */

var func = function () {
  var a = 1; // 当函数执行完后（退出函数）局部变量 a 将被销毁
  console.log(a); // 1
};

func();

var func1 = function () {
  var a = 1;
  return function () {
    a++;
    console.log(a);
  };
};

var f = func1();
f(); // 2
f(); // 3
f(); // 4
f(); // 5
/**
 * 当函数结束后，局部变量 a 并没有消失
 * 这是因为当执行 var f = func1() 时，func1 返回了一个匿名函数的引用并且赋值给了 f，它可以访问到 func1()
 * 被调用时产生的环境，而局部变量 a 一直处在这个环境里。
 * 既然局部变量所在的环境还能被外界访问，这个局部变量就有了不能被销毁的理由。
 * 在这里产生了一个闭包结构，局部变量的声明周期看起来被延续了。
 */